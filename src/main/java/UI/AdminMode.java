package UI;

import elements.Etudiant;
import elements.DB;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class AdminMode extends javax.swing.JFrame  {
     private ArrayList<Etudiant> etudiants; // Stores student data
     int sortMode = -1;
   

    public AdminMode() {
        initComponents();
        setIconImage();
        etudiants = new ArrayList<>();
        try {
            renderDatabase(sortMode);
        } catch (Exception e) {
            return;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    @SuppressWarnings("unused, unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        Disconnect = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Modify = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Export = new javax.swing.JButton();
        Sort = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin Mode");
        setPreferredSize(new java.awt.Dimension(1500, 840));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setLayout(null);

        jPanel2.setLayout(null);

        jLabel7.setFont(new java.awt.Font("SF Pro Rounded", 0, 36)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Admin Mode:");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(0, 300, 390, 70);

        Disconnect.setBackground(new java.awt.Color(255, 204, 255));
        Disconnect.setFont(new java.awt.Font("SF Pro Display", 3, 14)); // NOI18N
        Disconnect.setText("<<    Disconnect");
        Disconnect.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(102, 0, 102)));
        Disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisconnectActionPerformed(evt);
            }
        });
        jPanel2.add(Disconnect);
        Disconnect.setBounds(20, 20, 150, 30);

        jLabel6.setFont(new java.awt.Font("Source Code Pro", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("<html> Ignite Passion. <br> Inspire Excellence. <br>  Imagine Possibilities. </html>");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(0, 520, 390, 130);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Copyright Â© Sakura High School, All Rights Reserved.");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(0, 660, 390, 15);

        jLabel4.setFont(new java.awt.Font("Noto Serif Display", 1, 36)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Sakura High School");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(0, 240, 390, 60);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo.png"))); // NOI18N
        jPanel2.add(jLabel3);
        jLabel3.setBounds(0, 50, 390, 220);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo.png"))); // NOI18N
        jPanel2.add(jLabel1);
        jLabel1.setBounds(950, 33, 200, 200);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Admin_Screen.png"))); // NOI18N
        jPanel2.add(jLabel2);
        jLabel2.setBounds(0, 0, 440, 780);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(0, 0, 390, 1235);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Surname", "Date Of Birth", "Math", "Physics", "Literrature", "Science", "Chemistry", "History", "Geography", "French", "English", "German", "Score", "Mention"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1040, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3);
        jPanel3.setBounds(420, 80, 1040, 420);

        Modify.setBackground(new java.awt.Color(255, 204, 255));
        Modify.setFont(new java.awt.Font("SF Pro Display", 0, 14)); // NOI18N
        Modify.setText("Modify Selected Entry");
        Modify.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 153)));
        Modify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifyActionPerformed(evt);
            }
        });
        jPanel1.add(Modify);
        Modify.setBounds(460, 590, 180, 40);

        Delete.setBackground(new java.awt.Color(255, 204, 255));
        Delete.setFont(new java.awt.Font("SF Pro Display", 0, 14)); // NOI18N
        Delete.setText("Delete Selected Entries");
        Delete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 153)));
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        jPanel1.add(Delete);
        Delete.setBounds(930, 590, 210, 40);

        Export.setBackground(new java.awt.Color(255, 204, 255));
        Export.setFont(new java.awt.Font("SF Pro Display", 0, 14)); // NOI18N
        Export.setText("Export as CSV / PDF");
        Export.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 153)));
        Export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportActionPerformed(evt);
            }
        });
        jPanel1.add(Export);
        Export.setBounds(1170, 590, 210, 40);

        Sort.setBackground(new java.awt.Color(255, 204, 255));
        Sort.setFont(new java.awt.Font("SF Pro Display", 0, 14)); // NOI18N
        Sort.setText("Sort by Highest Score");
        Sort.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 153)));
        Sort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortActionPerformed(evt);
            }
        });
        jPanel1.add(Sort);
        Sort.setBounds(680, 590, 210, 40);

        jLabel9.setFont(new java.awt.Font("SF Pro Display", 2, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("V0.0.4");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(1420, 20, 37, 15);

        jLabel8.setFont(new java.awt.Font("SF Pro Display", 1, 48)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Database Report:");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(400, 20, 1090, 50);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1498, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void DisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisconnectActionPerformed
        this.dispose();
        Login l = new Login();
        l.setVisible(true);
        l.pack();
        l.setLocationRelativeTo(null);
        DB.closeConnection();
    }//GEN-LAST:event_DisconnectActionPerformed

    private void updateTableModel(int id) {
      DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
  
      // Remove the appropriate row (assuming student objects are stored in etudiants)
      int rowIndexToRemove = -1;
      for (int i = 0; i < etudiants.size(); i++) {
          if (etudiants.get(i).getId() == id) { // Assuming you have the selected student's id
              rowIndexToRemove = i;
              break;
          }
      }
      if (rowIndexToRemove >= 0) {
          tableModel.removeRow(rowIndexToRemove);
      }
  
      // Alternatively, if we're not storing student objects, we can use table model's data directly:
       //tableModel.removeRow(selectedRow);
  
      // Refresh the table
      tableModel.fireTableDataChanged();
      //refresh the database in here
    try (Connection con = DB.getConnection();
         PreparedStatement ps = con.prepareStatement("DELETE FROM etudiant WHERE idEtudiant = ?")) {
        ps.setInt(1, id); // Set the student ID in the prepared statement
        int rowsDeleted = ps.executeUpdate();
        if (rowsDeleted > 0) {
            System.out.println("Student with ID " + id + " deleted from database");
        } else {
            System.out.println("No student found with ID " + id + " in database");
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting student from database", "Error", JOptionPane.ERROR_MESSAGE);
       
    }
}
      
  
    public void SortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortActionPerformed
        // TODO add your handling code here:
        // Collections.sort((List<T>) etudiants);
        renderDatabase(sortMode);
        // Sorting button will not change state Unless the connection to MySql is established
        sortMode *= -1;
        String text = (sortMode == 1) ? "Sort by Highest Score" : "Unsort the list";
        Sort.setText(text);
    }//GEN-LAST:event_SortActionPerformed

    public void ExportActionPerformed(java.awt.event.ActionEvent evt) {                                     
        
        
    }        
   
    public void DeleteActionPerformed(java.awt.event.ActionEvent evt) {                                     
        
        
    }   
      
  // -----------work with this method to render the database-----
    public void renderDatabase(int sortMode) {
    // Clear existing data from the table model
    DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
    tableModel.setRowCount(0);

    // Fetch updated student data from database 
    etudiants.clear();
    Connection connection = null;
    try {
      connection = DB.getConnection();
    } catch (Exception ex) {
      return;
    }
    try {
      Statement statement = connection.createStatement();
      // @Ghassen u need to check this result set
      ResultSet resultSet = sortMode == 1 ? statement.executeQuery("SELECT * FROM etudiant ORDER BY moyenne DESC") : statement.executeQuery("SELECT * FROM etudiant");
      tableModel.setRowCount(0); // Clear existing data from the table maybe, haven't tested
     
      while (resultSet.next()) {
        int id = resultSet.getInt("idEtudiant");
        String name = resultSet.getString("nom");
        String surname = resultSet.getString("prenom");
        String dob = resultSet.getString("dateDeNaissance");
        double mathScore = resultSet.getDouble("noteMath");
        double physicsScore = resultSet.getDouble("notePhysique");
        double litteraturescore = resultSet.getDouble("noteLitterature");
        double chemistryScore = resultSet.getDouble("noteChimie");
        double scienceScore = resultSet.getDouble("noteSVT");
        double historyScore = resultSet.getDouble("noteHistoire");
        double geographyScore = resultSet.getDouble("noteGeographie");
        double frenchScore = resultSet.getDouble("noteFrancais");
        double englishScore = resultSet.getDouble("noteAnglais");
        double germanScore = resultSet.getDouble("noteAllemand");
        double Moyenne = resultSet.getDouble("Moyenne");
        String Mention = resultSet.getString("Mention");

        System.out.println(id + " " + name + " " + surname + " " + dob + " " + mathScore + " " + physicsScore + " " + litteraturescore + " " + chemistryScore + " " + scienceScore + " " + historyScore + " " + geographyScore + " " + frenchScore + " " + englishScore + " " + germanScore + " " + Moyenne + " " + Mention);
       
        Etudiant etudiant = new Etudiant(name, surname, dob);
    
        etudiant.ajouteNotes(mathScore, physicsScore, litteraturescore, scienceScore,chemistryScore, historyScore, geographyScore, englishScore, frenchScore,  germanScore);
        etudiant.setId(id);
        
        // Repopulate the table model with updated student data
           etudiants.add(etudiant);
          tableModel.addRow(new Object[]{etudiant.getId(),etudiant.getNom(), etudiant.getPrenom(), etudiant.getDateDeNaiss(), etudiant.getNoteMath(), etudiant.getNotePhysique(),etudiant.getNoteLitteraire(), etudiant.getNoteChimie(),etudiant.getNoteSvt(), etudiant.getNoteHistoire(), etudiant.getNoteGeographie(), etudiant.getNoteFrancais(),etudiant.getNoteAnglais(), etudiant.getNoteAllemand(), etudiant.moy.getMoy(), etudiant.moy.getMention()});
        
    
        // Refresh the table
        tableModel.fireTableDataChanged();
        
      }
      //  resultSet.close();
      //  statement.close();
      //  connection.close();
    } catch (SQLException ex) {
      ex.printStackTrace();
    }

  }
    public void ModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifyActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
            if (selectedRow >= 0) {
              Etudiant selectedEtudiant = etudiants.get(selectedRow);

              // display a simple dialog to edit some fields
              String newName = Dialogs.InputDialog("Modify Student", "Enter new name:" );
              String newSurname = Dialogs.InputDialog("Modify Student", "Enter new surname:" );
                
              String newdateOfBirth = Dialogs.InputDialog("Modify Student", "Enter new Date of birth:" );
              String newMathScore = Dialogs.InputDialog("Modify Student", "Enter new math score:" );
              String newPhysicsScore = Dialogs.InputDialog("Modify Student", "Enter new physics score:" );
              String newLiterraturescore = Dialogs.InputDialog("Modify Student", "Enter new litterature score:" );
              String newScienceScore = Dialogs.InputDialog("Modify Student", "Enter new science score:" );
              String newChemistryScore = Dialogs.InputDialog("Modify Student", "Enter new chemistry score:" );
              String newHistoryScore = Dialogs.InputDialog("Modify Student", "Enter new history score:" );
              String newGeographyScore = Dialogs.InputDialog("Modify Student", "Enter new geography score:" );
              String newFrenchScore = Dialogs.InputDialog("Modify Student", "Enter new french score:" );
              String newEnglishScore = Dialogs.InputDialog("Modify Student", "Enter new english score:" );
              String newGermanScore = Dialogs.InputDialog("Modify Student", "Enter new german score:" );
                // Wow just use Dialogs for this!!!!

              // ... (similar prompts for other editable fields)

              // Update the selected student object with the modified values
              if (newName != null) {
                selectedEtudiant.setNom(newName);
              }
              if (newSurname != null) {
                selectedEtudiant.setPrenom(newSurname);
              }
              // ... (update other fields based on user input)

              // Update the table model with the modified data
              updateTableModel(selectedRow);
            } else {
              Dialogs.writeErr("Error", "No student selected");
            }
    }//GEN-LAST:event_ModifyActionPerformed

    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JButton Disconnect;
    private javax.swing.JButton Export;
    private javax.swing.JButton Modify;
    private javax.swing.JButton Sort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void setIconImage() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/db_icon.png")));
    }
}

// End of AdminMode.java
// Reload the database: state(-1) -> Used in AdminMode.java when constructing the AdminMode Window
// it does these things:
// DELETE ALL ELEMENTS FROM THE JTABLE
// Access the database
// set label
// Query the database: SELECT * from etudiants
// Iterate over each element while populating the JTable
// JTable has all elements
//
// Reload the database: state(1) ->
// DELETE ALL ELEMENTS FROM THE JTABLE
// Query the database with sorting of moyenne
// set label
// Populate the JTable with the sorted elements

// int s = -1;
// s *= -1;
// Reload the database: state(s)
